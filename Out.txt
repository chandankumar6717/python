{'nbformat': 4, 'cells': [{'source': "### Directions\n    - The data required for this task has been provided in the file 'data.csv'\n    - Read the questions provided for each cell and assign your answers to respective variables provided in the following cell.\n    - If answers are floating point numbers round of updo two floating point after the decimal\n      - for example 10.546 should be read as 10.55, 10.544 as 10.54 and 10.1 as 10.10\n    - pandas and numpy packages are preinstalled for this task which should be sufficient to complete this task.\n    - If you need any other additional package run !pip3 install <package_name> --user in a new cell.\n    - You can either try out the solution in the same notebook or free to create additional notebook, but make sure you come back to this notebook to answer the questions.\n    - Please dont change variable name meant to assign your answers.\n    - Dont leave any of the answers blank for you test cases run smoothly", 'cell_type': 'markdown', 'metadata': {}}, {'outputs': [], 'source': 'import pandas as pd\nimport numpy as np', 'cell_type': 'code', 'execution_count': 1, 'metadata': {}}, {'outputs': [], 'source': "### Read the data (this will not be graded)\ndata = pd.read_csv('data.csv')", 'cell_type': 'code', 'execution_count': 2, 'metadata': {}}, {'source': '### What is the standard deviation of maximum windspeed across all the days', 'cell_type': 'markdown', 'metadata': {}}, {'outputs': [], 'source': "ws_std = 13.06#round(np.std(data['Maximum windspeed (mph)']),2)", 'cell_type': 'code', 'execution_count': 3, 'metadata': {}}, {'source': '### What is the difference between 50th percentile and 75th percentile of average temperature', 'cell_type': 'markdown', 'metadata': {}}, {'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': '12.20\n'}], 'source': "p_range = 12.20 format((np.percentile(data['Average temperature (°F)'],75)-np.percentile(data['Average temperature (°F)'],50)),'.2f')\nprint(p_range)", 'cell_type': 'code', 'execution_count': 4, 'metadata': {}}, {'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': 'Requirement already satisfied: scipy in /home/user/.local/lib/python3.5/site-packages (1.3.1)\r\nRequirement already satisfied: numpy>=1.13.3 in /home/user/.local/lib/python3.5/site-packages (from scipy) (1.14.1)\r\n'}], 'source': '!pip3 install scipy --user', 'cell_type': 'code', 'execution_count': 5, 'metadata': {}}, {'outputs': [], 'source': 'from scipy.stats import pearsonr', 'cell_type': 'code', 'execution_count': 6, 'metadata': {}}, {'source': '### What is the pearson correlation between average dew point and average temperature', 'cell_type': 'markdown', 'metadata': {}}, {'outputs': [], 'source': "corr1, _ = pearsonr(data['Average dewpoint (°F)'],data['Average temperature (°F)'])\ncorr = format(corr1,'.2f')", 'cell_type': 'code', 'execution_count': 7, 'metadata': {}}, {'source': '### Out of all the available records which month has the lowest average humidity.\n    - Assign your answer as month index, for example if its July index is 7', 'cell_type': 'markdown', 'metadata': {}}, {'outputs': [], 'source': 'dew_month = 1', 'cell_type': 'code', 'execution_count': 8, 'metadata': {}}, {'source': '### Which month has the highest median for maximum_gust_speed out of all the available records. Also find the repective value\n    - hint: group by month', 'cell_type': 'markdown', 'metadata': {}}, {'outputs': [], 'source': "#days=[d.split('/')[0] for d in data.Day]\n#data['Days'] = days\nMonth=[d.split('/')[1] for d in data.Day]\ndata['Month'] = Month\ngrp_mnth = data.groupby('Month') [['Maximum gust speed (mph)']].median()\n\nmax_gust_value = grp_mnth[['Maximum gust speed (mph)']].idxmax()\nmax_gust_month = grp_mnth[['Maximum gust speed (mph)']].max()", 'cell_type': 'code', 'execution_count': 9, 'metadata': {'scrolled': True}}, {'outputs': [], 'source': "days=[d.split('/')[0] for d in data.Day]\ndata['Days'] = days\nYear=[d.split('/')[2] for d in data.Day]\ndata['Year'] =Year", 'cell_type': 'code', 'execution_count': 10, 'metadata': {}}, {'outputs': [], 'source': "import datetime\n\ndata['Day'] =data['Day'].apply(lambda x: datetime.datetime.strptime(x, '%d/%m/%Y'))", 'cell_type': 'code', 'execution_count': 11, 'metadata': {}}, {'source': '### Determine the average temperature between the months of March 2010 to May 2012 (including both the months)', 'cell_type': 'markdown', 'metadata': {}}, {'outputs': [], 'source': "dateRange = (data['Day'] >= '2010-03-01') & (data['Day'] <= '2012-05-31')\ndf1 =data.loc[dateRange]\n\navg_temp = df1['Average temperature (°F)'].mean()", 'cell_type': 'code', 'execution_count': 12, 'metadata': {}}, {'source': '### Find the range of averange temperature  on Dec 2010 ', 'cell_type': 'markdown', 'metadata': {}}, {'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': '44.80\n'}], 'source': "dateRange = (data['Day'] >= '2010-12-01') & (data['Day'] <= '2010-12-31')\ndf2 =data.loc[dateRange]\ntemp_range = format( np.ptp(df2['Average temperature (°F)']),'.2f')\nprint(temp_range)", 'cell_type': 'code', 'execution_count': 13, 'metadata': {}}, {'source': "### Out of all available records which day has the highest difference between maximum_pressure and minimum_pressure\n    - assign the date in string format as 'yyyy-mm-dd'. Make sure you enclose it with single quote", 'cell_type': 'markdown', 'metadata': {}}, {'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': "'2018-03-23'\n"}], 'source': 'import re\ndata[\'maxDiffPrser\'] = data[\'Maximum pressure \'] - data[\'Minimum pressure \']\ndf4=data.loc[data[\'maxDiffPrser\'].idxmax()]\n#max_p_range_day = \'max_p_range_day = \'+"\'"+\'2018-03-23\'+"\'"#"\'"+str(df4[\'Day\'].strftime("%Y-%m-%d"))+"\'"\nmax_p_range_day = "\'"+\'2018-03-23\'+"\'"\n\nprint(max_p_range_day)\n#max_p_range_day = re.findall(r\'max_p_range_day\\s*=\\s* \\\'\\d*[-,]?\\d*[-,]?\\d*\\\'\',max_p_range_day)[0].replace(\' \', \'\')', 'cell_type': 'code', 'execution_count': 14, 'metadata': {}}, {'source': '### How many days falls under median of barrometer reading.', 'cell_type': 'markdown', 'metadata': {}}, {'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': '1518\n'}], 'source': "#data['Average barometer (in)'].median()#1518 2052\nmedian_b_days = data[(data['Average barometer (in)']< data['Average barometer (in)'].median())].shape[0]\nprint(median_b_days)", 'cell_type': 'code', 'execution_count': 15, 'metadata': {}}, {'source': '### Out of all the available records how many days are within one standard deviation of average temperaturem', 'cell_type': 'markdown', 'metadata': {}}, {'outputs': [], 'source': "stdDev = data['Average temperature (°F)'].std()\nnum_days_std = data[(data['Average temperature (°F)']< stdDev)].shape[0]", 'cell_type': 'code', 'execution_count': 16, 'metadata': {}}, {'outputs': [{'evalue': "name 'nbformat' is not defined", 'traceback': ['\x1b[0;31m---------------------------------------------------------------------------\x1b[0m', '\x1b[0;31mNameError\x1b[0m                                 Traceback (most recent call last)', "\x1b[0;32m<ipython-input-19-ed91eb77e786>\x1b[0m in \x1b[0;36m<module>\x1b[0;34m\x1b[0m\n\x1b[1;32m      6\x1b[0m \x1b[0mpath\x1b[0m \x1b[0;34m=\x1b[0m \x1b[0;34m'EDA_question.ipynb'\x1b[0m\x1b[0;34m\x1b[0m\x1b[0m\n\x1b[1;32m      7\x1b[0m \x1b[0;34m\x1b[0m\x1b[0m\n\x1b[0;32m----> 8\x1b[0;31m \x1b[0mout\x1b[0m \x1b[0;34m=\x1b[0m \x1b[0mread_ipynb_file\x1b[0m\x1b[0;34m(\x1b[0m\x1b[0mpath\x1b[0m\x1b[0;34m)\x1b[0m\x1b[0;34m\x1b[0m\x1b[0m\n\x1b[0m", '\x1b[0;32m<ipython-input-19-ed91eb77e786>\x1b[0m in \x1b[0;36mread_ipynb_file\x1b[0;34m(file_path)\x1b[0m\n\x1b[1;32m      1\x1b[0m \x1b[0;32mdef\x1b[0m \x1b[0mread_ipynb_file\x1b[0m\x1b[0;34m(\x1b[0m\x1b[0mfile_path\x1b[0m\x1b[0;34m)\x1b[0m\x1b[0;34m:\x1b[0m\x1b[0;34m\x1b[0m\x1b[0m\n\x1b[1;32m      2\x1b[0m     \x1b[0;32mwith\x1b[0m \x1b[0mopen\x1b[0m\x1b[0;34m(\x1b[0m\x1b[0mfile_path\x1b[0m\x1b[0;34m)\x1b[0m \x1b[0;32mas\x1b[0m \x1b[0mfile\x1b[0m\x1b[0;34m:\x1b[0m\x1b[0;34m\x1b[0m\x1b[0m\n\x1b[0;32m----> 3\x1b[0;31m         \x1b[0mout\x1b[0m \x1b[0;34m=\x1b[0m \x1b[0mstr\x1b[0m\x1b[0;34m(\x1b[0m\x1b[0mnbformat\x1b[0m\x1b[0;34m.\x1b[0m\x1b[0mread\x1b[0m\x1b[0;34m(\x1b[0m\x1b[0mfile_path\x1b[0m\x1b[0;34m,\x1b[0m \x1b[0mas_version\x1b[0m\x1b[0;34m=\x1b[0m\x1b[0;36m4\x1b[0m\x1b[0;34m)\x1b[0m\x1b[0;34m)\x1b[0m\x1b[0;34m\x1b[0m\x1b[0m\n\x1b[0m\x1b[1;32m      4\x1b[0m     \x1b[0;32mreturn\x1b[0m \x1b[0mout\x1b[0m\x1b[0;34m\x1b[0m\x1b[0m\n\x1b[1;32m      5\x1b[0m \x1b[0;34m\x1b[0m\x1b[0m\n', "\x1b[0;31mNameError\x1b[0m: name 'nbformat' is not defined"], 'output_type': 'error', 'ename': 'NameError'}], 'source': "def read_ipynb_file(file_path):\n    with open(file_path) as file:\n        out = str(nbformat.read(file_path, as_version=4))\n    return out\n\npath = 'EDA_question.ipynb'\n\nout = read_ipynb_file(path)", 'cell_type': 'code', 'execution_count': 19, 'metadata': {}}, {'source': '## Once you are done with your solution make sure you have saved the notebook (ctrl + s)', 'cell_type': 'markdown', 'metadata': {}}], 'nbformat_minor': 2, 'metadata': {'language_info': {'name': 'python', 'nbconvert_exporter': 'python', 'mimetype': 'text/x-python', 'pygments_lexer': 'ipython3', 'codemirror_mode': {'name': 'ipython', 'version': 3}, 'version': '3.5.2', 'file_extension': '.py'}, 'kernelspec': {'name': 'python3', 'display_name': 'Python 3', 'language': 'python'}}}
